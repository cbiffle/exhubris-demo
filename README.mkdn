# Standalone Hubris Project Demo

This is a simple standalone firmware application built using Hubris, without
having to include either Hubris or its build tools in the repo. This serves as a
proof of concept for the [exhubris project], which tries to make Hubris useful
to more people.

## How to build and run

First, you will need `hubake`, the (ex)Hubris build tool. Install it thus:

```
cargo install --git https://github.com/cbiffle/exhubris hubake --locked
```

(The intent is that you should not need to _update_ `hubake` after installing
it, because it serves as a fa√ßade for the real tools. But it's early days, so
you may need to update it later.)

Next, in this repo, run:

```
hubake build app.kdl
```

This will produce a _build archive file_ named `demo-build.zip`. (It will also
produce ELF files in `.work/demo/final` if you want to examine them without
unzipping.)


## How to actually run this on a board

The demo in this repo is currently intended for the [ST NUCLEO-G031K8
board][nuc], which is currently cheaply available in most places for USD$11 or
less. You need one of those boards, and a fairly recent version of [Humility].

If you don't have Humility installed, or need to update your copy, run:

```
cargo install --git https://github.com/oxidecomputer/humility humility --locked
```

Now, plug in your Nucleo board over USB, and point Humility to the
`demo-build.zip` file we produced in the previous step:

```
humility -a demo-build.zip flash
```

You should see something like this:

```
humility: attaching with chip set to "STM32G031K8Tx"
humility: attached via ST-Link V2-1
humility: flash/archive mismatch; reflashing
humility: flashing done
```

and the green LED on your Nucleo should now be blinking.


## How to use GDB

Humility is not a halting debugger --- it cannot set breakpoints or show local
variables. For that, you'll need `arm-none-eabi-gdb` or equivalent, plus OpenOCD.

After running a build, use the `pack-hex` command to produce both a `hex` file
for OpenOCD, and a `gdbconfig` for gdb:

```
hubake pack-hex .work/demo/final output.hex -g gdbconfig
```

And then in one terminal, start openocd and ask it to flash the hex file and
then wait:

```
openocd -f openocd.cfg -c "program output.hex verify"
```

And in a second terminal, run:

```
arm-none-eabi-gdb -x gdbconfig
```

At the GDB prompt, type `continue` or `c` and press enter to start the firmware,
Ctrl-C to interrupt it.


## What's in this repo

The main files are:

- `app.kdl`: defines a firmware application. You could have more than one of
  these to generate different images. In this case it specifies how to build the
  kernel, and brings in some task crates.

- `hubris-env.toml`: marks a directory as the root of a Hubris project, and
  specifies the pinned version of the build tools that the project wants to use.
  This is similar to a `rust-toolchain.toml` file.

- `rust-toolchain.toml` (for `rustup`): pins the toolchain revision used in the
  project, to aid in reproduceability.

- `pong` and `ping`: simple custom tasks that interact over IPC.

- `Cargo.toml`: explains where to find the code for `ping` and `pong`, and
  centralizes some dependency declarations. Exhubris projects are currently
  required to be Cargo projects, but I hope to loosen this in the future. It
  isn't _much_ of a limitation since usually you want at least some custom code.

- `Cargo.lock`: pins all the transitive dependencies that can be reached from
  `Cargo.toml`, to aid in reproduceability.

There are currently some additional files in the repo, which I hope to render
unnecessary eventually:

- `chips/*.kdl`: definitions of the SoCs used. It needs to be possible to
  reference these from an external source, so that everyone doesn't wind up
  copying them into their repo.

[nuc]: https://www.st.com/en/evaluation-tools/nucleo-g031k8.html
[exhubris project]: https://github.com/cbiffle/exhubris/
[Humility]: https://github.com/oxidecomputer/humility/
